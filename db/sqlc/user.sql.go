// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    full_name,
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING username, password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, password, full_name, email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const resetUserTable = `-- name: ResetUserTable :exec
DELETE FROM users
`

func (q *Queries) ResetUserTable(ctx context.Context) error {
	_, err := q.exec(ctx, q.resetUserTableStmt, resetUserTable)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    password = COALESCE($1,password),
    full_name = COALESCE($2, full_name), 
    email = COALESCE($3, email)
WHERE 
    username = $4 
RETURNING username, password, full_name, email, password_changed_at, created_at
`

type UpdateUserParams struct {
	Password sql.NullString `json:"password"`
	FullName sql.NullString `json:"full_name"`
	Email    sql.NullString `json:"email"`
	Username string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Password,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
